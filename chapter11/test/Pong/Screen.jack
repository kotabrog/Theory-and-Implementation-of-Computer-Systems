// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static int baseAddress;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int j;

        let baseAddress = 16384;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let j = 1;
        while (j < 16) {
            let twoToThe[j] = twoToThe[j - 1] + twoToThe[j - 1];
            let j = j + 1;
        }
        do Screen.clearScreen();
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = baseAddress;
        while (i < 24576) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int value, address, j;
        let address = baseAddress + (y * 32) + (x / 16);
        let value = Memory.peek(address);
        let j = x - (x / 16 * 16);
        if (twoToThe[j] & value = 0) {
            if (color) {
                let value = value + twoToThe[j];
            }
        } else {
            if (~color) {
                let value = value & ~twoToThe[j];
            }
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int startX, startY, dx, dy, a, b, adyMinusbdx;
        var bool goBottom;
        if (x2 < x1) {
            let startX = x2;
            let startY = y2;
            let dx = x1 - x2;
            if (y1 < y2) {
                let goBottom = false;
                let dy = y2 - y1;
            }
            else {
                let goBottom = true;
                let dy = y1 - y2;
            }
        }
        else {
            let startX = x1;
            let startY = y1;
            let dx = x2 - x1;
            if (y2 < y1) {
                let goBottom = false;
                let dy = y1 - y2;
            }
            else {
                let goBottom = true;
                let dy = y2 - y1;
            }
        }
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;
        while (~((a > dx) | (b > dy))) {
            if (goBottom) {
                do Screen.drawPixel(startX + a, startY + b);
            } else {
                do Screen.drawPixel(startX + a, startY - b);
            }
            if (dx = 0) {
                let b = b + 1;
            } else {
                if (dy = 0) {
                    let a = a + 1;
                } else {
                    if (adyMinusbdx < 0) {
                        let a = a + 1;
                        let adyMinusbdx = adyMinusbdx + dy;
                    } else {
                        let b = b + 1;
                        let adyMinusbdx = adyMinusbdx - dx;
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int c, r;
        let r = y1;
        while (r < (y2 + 1)) {
            let c = x1;
            while (c < (x2 + 1)) {
                do Screen.drawPixel(c, r);
                let c = c + 1;
            }
            let r = r + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int value, stepR;
        if (r > 181) {
            return;
        }
        let stepR = 0;
        while (stepR < (r + 1)) {
            let value = Math.sqrt(r * r - (stepR * stepR));
            do Screen.drawLine(x - value, y + stepR, x + value + 1, y + stepR);
            do Screen.drawLine(x - value, y - stepR, x + value + 1, y - stepR);
            let stepR = stepR + 1;
        }
        return;
    }
}

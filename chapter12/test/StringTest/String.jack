// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array array;
    field int len, maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let array = Array.new(maxLength);
        }
        let maxLen = maxLength;
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(maxLen = 0)) {
            do array.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return array[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let array[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let array[len] = c;
        let len = len + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, i;
        var boolean flag, minus;
        let value = 0;
        let i = 0;
        let flag = true;
        let minus = false;
        if (len = 0) {
            return 0;
        }
        if (array[0] = 45) {
            let minus = true;
            let i = i + 1;
        }
        while (i < len & flag) {
            if (47 < array[i] & (array[i] < 58)) {
                let value = value * 10 + (array[i] - 48);
            }
            else {
                let flag = false;
            }
            let i = i + 1;
        }
        if (minus) {
            let value = -value;
        }
        return value;
    }

    method void setIntSupport(int val) {
        var int value;
        if (val = 0) {
            return;
        }
        let value = val / 10;
        do setIntSupport(value);
        let value = val - (value * 10);
        do appendChar(value + 48);
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        if (val = 0) {
            do appendChar(48);
            return;
        }
        if (val < 0) {
            do appendChar(45);
        }
        do setIntSupport(Math.abs(val));
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
